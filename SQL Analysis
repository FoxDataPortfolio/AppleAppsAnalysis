** EXPLORATORY DATA ANALYSIS**

-- Confirm number of entries in both datasets matches --
SELECT COUNT(DISTINCT ID) AS UniqueAppIDs
FROM appleStore_description_combined

SELECT COUNT(DISTINCT ID) AS UniqueAppIDs
FROM AppleStore


-- Checking for NULL values --
SELECT COUNT(*)
FROM appleStore_description_combined
WHERE id IS NULL or track_name is NULL or size_bytes is null or app_desc is null

SELECT COUNT(*)
FROM AppleStore
WHERE track_name IS NULL OR prime_genre IS NULL

-- Find out the number of apps per genre --
SELECT prime_genre, COUNT(*) AS numGenre
FROM AppleStore
GROUP BY prime_genre
order BY numGenre DESC

-- Get an overview of the apps' ratings --
SELECT 
	min(user_rating) AS minRating, 
    max(user_rating) as maxRating,
    avg(user_rating) AS avgRating
from AppleStore


**DATA ANALYSIS**

-- Determine whether paid apps have higher ratings than free apps --
SELECT
	CASE
    	When price > 0 then 'Paid'
        else 'Free'
    end as appType,
    avg(user_rating) as avgRating
From AppleStore
group by appType

-- Check if apps with more supported languages have higher ratings --
SELECT 
	CASE
    	when lang_num < 10 then '<10 languages'
        when lang_num between 10 and 30 then '10 - 30 languages'
        else '>30 languages'
    end as languageBucket,
    avg(user_rating) as avgRating
from AppleStore
group by languageBucket    
order by avgRating DESC

-- Check genres with low ratings --
SELECT
	prime_genre,
    avg(user_rating)
from AppleStore
group by prime_genre
order by avg(user_rating) ASC
limit 10

-- Check if there is correlation between the length of the app description and user rating --
SELECT
	s.user_rating,
	round(avg(length(d.app_desc)), 2)
from AppleStore s
join appleStore_description_combined d on s.id = d.id
group by s.user_rating

-- Check the top-rated apps for each genre --
Select
	prime_genre,
    track_name,
    user_rating
FROM (
SELECT
	prime_genre,
    track_name,
    user_rating,
    rank() over(partition by prime_genre order by user_rating desc, rating_count_tot DESC) AS rnk
FROM AppleStore ) as r
WHERE r.rnk = 1


--Check if there is a correlation between price and rating--
Select 
	case 
    	when price < 5 then '< $5'
    	when price between 5 and 10 then '$5 - $10'
        else '> $10'
    end as pricingBucket,
        round(avg(user_rating), 2)
from AppleStore
WHERE price > 0
group by pricingBucket
